#!/usr/bin/env python3
"""
Exemplo de uso do MCP LangChain Adapters
Este script demonstra como integrar MCP servers com LangChain
"""

import asyncio
import os
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from langchain_mcp_adapters.tools import load_mcp_tools
from langchain_mcp_adapters.client import MultiServerMCPClient
from langgraph.prebuilt import create_react_agent

# Configura√ß√£o para m√∫ltiplos servidores MCP
MCP_CONFIG = {
    "filesystem": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-filesystem", "."],
        "transport": "stdio",
    },
    # Adicione mais servidores conforme necess√°rio
}

async def example_single_server():
    """Exemplo com um √∫nico servidor MCP"""
    print("üîß Exemplo: Servidor MCP √önico")
    
    # Configura√ß√£o do servidor
    server_params = StdioServerParameters(
        command="npx",
        args=["-y", "@modelcontextprotocol/server-filesystem", "."],
    )
    
    try:
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                # Inicializar conex√£o
                await session.initialize()
                
                # Carregar ferramentas MCP
                tools = await load_mcp_tools(session)
                print(f"‚úÖ Carregadas {len(tools)} ferramentas MCP")
                
                # Listar ferramentas dispon√≠veis
                for tool in tools:
                    print(f"  - {tool.name}: {tool.description}")
                
    except Exception as e:
        print(f"‚ùå Erro no servidor √∫nico: {e}")

async def example_multi_server():
    """Exemplo com m√∫ltiplos servidores MCP"""
    print("\nüîß Exemplo: M√∫ltiplos Servidores MCP")
    
    try:
        # Cliente para m√∫ltiplos servidores
        client = MultiServerMCPClient(MCP_CONFIG)
        
        # Carregar todas as ferramentas
        tools = await client.get_tools()
        print(f"‚úÖ Carregadas {len(tools)} ferramentas de m√∫ltiplos servidores")
        
        # Listar ferramentas por servidor
        for tool in tools:
            print(f"  - {tool.name}: {tool.description}")
            
        # Fechar conex√µes
        await client.close()
        
    except Exception as e:
        print(f"‚ùå Erro em m√∫ltiplos servidores: {e}")

async def example_with_agent():
    """Exemplo usando MCP tools com um agente LangGraph"""
    print("\nü§ñ Exemplo: Agente com Ferramentas MCP")
    
    # Verificar se a chave da OpenAI est√° configurada
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada. Pulando exemplo do agente.")
        return
    
    try:
        # Cliente MCP
        client = MultiServerMCPClient(MCP_CONFIG)
        tools = await client.get_tools()
        
        if not tools:
            print("‚ö†Ô∏è  Nenhuma ferramenta MCP dispon√≠vel")
            return
        
        # Criar agente ReAct
        agent = create_react_agent("openai:gpt-4", tools)
        
        # Executar uma tarefa
        task = "Liste os arquivos no diret√≥rio atual"
        print(f"üéØ Executando tarefa: {task}")
        
        response = await agent.ainvoke({"messages": [{"role": "user", "content": task}]})
        print(f"ü§ñ Resposta do agente: {response}")
        
        await client.close()
        
    except Exception as e:
        print(f"‚ùå Erro no agente: {e}")

async def check_mcp_installation():
    """Verificar se o MCP est√° instalado corretamente"""
    print("üîç Verificando instala√ß√£o do MCP...")
    
    try:
        import mcp
        import langchain_mcp_adapters
        import langgraph
        
        print("‚úÖ Todas as depend√™ncias MCP est√£o instaladas:")
        print(f"  - mcp: ‚úÖ Instalado")
        print(f"  - langchain-mcp-adapters: ‚úÖ Instalado")
        print(f"  - langgraph: ‚úÖ Instalado")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando MCP LangChain Integration")
    print("=" * 50)
    
    # Verificar instala√ß√£o
    if not await check_mcp_installation():
        print("\nüí° Para instalar as depend√™ncias:")
        print("pip install langchain-mcp-adapters langgraph 'langchain[openai]'")
        return
    
    # Executar exemplos
    await example_single_server()
    await example_multi_server()
    await example_with_agent()
    
    print("\n‚úÖ Todos os exemplos executados!")
    print("\nüí° Pr√≥ximos passos:")
    print("1. Configure OPENAI_API_KEY para usar o agente")
    print("2. Instale servidores MCP adicionais com 'npx'")
    print("3. Adicione mais servidores ao MCP_CONFIG")

if __name__ == "__main__":
    asyncio.run(main())