"""
Interface Gr√°fica Principal do NeuroTranslator PT-EN
Implementa GUI moderna usando CustomTkinter
"""

import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import time
from typing import Optional, Dict, Any

try:
    import customtkinter as ctk
except ImportError:
    print("‚ö†Ô∏è CustomTkinter n√£o encontrado. Execute: pip install customtkinter")
    import tkinter as ctk

from ..translation.translator import NeuroTranslator
from ..utils.logger import setup_logger

class NeuroTranslatorGUI:
    """Interface gr√°fica principal do NeuroTranslator"""
    
    def __init__(self, config: Optional[Dict] = None):
        """
        Inicializar interface gr√°fica
        
        Args:
            config: Configura√ß√µes da aplica√ß√£o
        """
        self.config = config or {}
        self.translator = NeuroTranslator(config)
        
        # Configurar tema
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Criar janela principal
        self.root = ctk.CTk()
        self.root.title("üß† NeuroTranslator PT-EN v1.0")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Vari√°veis
        self.is_translating = False
        self.translation_history = []
        
        # Criar interface
        self.create_widgets()
        self.setup_layout()
        
        # Carregar modelo padr√£o
        self.translator.load_model("balanced")
    
    def create_widgets(self):
        """Criar widgets da interface"""
        
        # Frame principal
        self.main_frame = ctk.CTkFrame(self.root)
        
        # T√≠tulo
        self.title_label = ctk.CTkLabel(
            self.main_frame,
            text="üß† NeuroTranslator PT-EN",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        
        # Frame de configura√ß√µes
        self.config_frame = ctk.CTkFrame(self.main_frame)
        
        # Sele√ß√£o de idiomas
        self.source_lang_label = ctk.CTkLabel(self.config_frame, text="Idioma de origem:")
        self.source_lang_combo = ctk.CTkComboBox(
            self.config_frame,
            values=["Auto", "Portugu√™s", "English"],
            state="readonly"
        )
        self.source_lang_combo.set("Auto")
        
        self.target_lang_label = ctk.CTkLabel(self.config_frame, text="Idioma de destino:")
        self.target_lang_combo = ctk.CTkComboBox(
            self.config_frame,
            values=["English", "Portugu√™s"],
            state="readonly"
        )
        self.target_lang_combo.set("English")
        
        # Sele√ß√£o de modelo
        self.model_label = ctk.CTkLabel(self.config_frame, text="Modelo:")
        self.model_combo = ctk.CTkComboBox(
            self.config_frame,
            values=["R√°pido", "Preciso", "Balanceado"],
            state="readonly",
            command=self.on_model_change
        )
        self.model_combo.set("Balanceado")
        
        # Frame de tradu√ß√£o
        self.translation_frame = ctk.CTkFrame(self.main_frame)
        
        # Texto de entrada
        self.input_label = ctk.CTkLabel(self.translation_frame, text="Texto para traduzir:")
        self.input_text = ctk.CTkTextbox(
            self.translation_frame,
            height=100
        )
        self.input_text.insert("0.0", "Digite ou cole o texto aqui...")
        
        # Bot√µes de a√ß√£o
        self.button_frame = ctk.CTkFrame(self.translation_frame)
        
        self.translate_button = ctk.CTkButton(
            self.button_frame,
            text="üîÑ Traduzir",
            command=self.translate_text,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        
        self.clear_button = ctk.CTkButton(
            self.button_frame,
            text="üóëÔ∏è Limpar",
            command=self.clear_text,
            fg_color="gray"
        )
        
        self.swap_button = ctk.CTkButton(
            self.button_frame,
            text="üîÑ Inverter",
            command=self.swap_languages,
            fg_color="orange"
        )
        
        # Texto de sa√≠da
        self.output_label = ctk.CTkLabel(self.translation_frame, text="Tradu√ß√£o:")
        self.output_text = ctk.CTkTextbox(
            self.translation_frame,
            height=100,
            state="disabled"
        )
        
        # Frame de informa√ß√µes
        self.info_frame = ctk.CTkFrame(self.main_frame)
        
        # Barra de progresso
        self.progress_bar = ctk.CTkProgressBar(self.info_frame)
        self.progress_bar.set(0)
        
        # Labels de informa√ß√£o
        self.status_label = ctk.CTkLabel(
            self.info_frame,
            text="‚úÖ Pronto para traduzir",
            font=ctk.CTkFont(size=12)
        )
        
        self.stats_label = ctk.CTkLabel(
            self.info_frame,
            text="Tradu√ß√µes: 0 | Tempo m√©dio: 0.000s",
            font=ctk.CTkFont(size=10)
        )
        
        # Menu
        self.create_menu()
    
    def create_menu(self):
        """Criar menu da aplica√ß√£o"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Arquivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Arquivo", menu=file_menu)
        file_menu.add_command(label="Abrir arquivo...", command=self.open_file)
        file_menu.add_command(label="Salvar tradu√ß√£o...", command=self.save_translation)
        file_menu.add_separator()
        file_menu.add_command(label="Sair", command=self.root.quit)
        
        # Menu Ferramentas
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ferramentas", menu=tools_menu)
        tools_menu.add_command(label="Hist√≥rico", command=self.show_history)
        tools_menu.add_command(label="Estat√≠sticas", command=self.show_stats)
        tools_menu.add_command(label="Configura√ß√µes", command=self.show_settings)
        
        # Menu Ajuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ajuda", menu=help_menu)
        help_menu.add_command(label="Sobre", command=self.show_about)
        help_menu.add_command(label="Documenta√ß√£o", command=self.show_docs)
    
    def setup_layout(self):
        """Configurar layout da interface"""
        
        # Frame principal
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        self.title_label.pack(pady=(0, 20))
        
        # Frame de configura√ß√µes
        self.config_frame.pack(fill="x", pady=(0, 10))
        
        # Layout das configura√ß√µes
        self.source_lang_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.source_lang_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        self.target_lang_label.grid(row=0, column=2, padx=5, pady=5, sticky="w")
        self.target_lang_combo.grid(row=0, column=3, padx=5, pady=5, sticky="ew")
        
        self.model_label.grid(row=0, column=4, padx=5, pady=5, sticky="w")
        self.model_combo.grid(row=0, column=5, padx=5, pady=5, sticky="ew")
        
        # Configurar colunas
        for i in range(6):
            self.config_frame.grid_columnconfigure(i, weight=1)
        
        # Frame de tradu√ß√£o
        self.translation_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # Layout da tradu√ß√£o
        self.input_label.pack(anchor="w", padx=10, pady=(10, 5))
        self.input_text.pack(fill="x", padx=10, pady=(0, 10))
        
        # Bot√µes
        self.button_frame.pack(fill="x", padx=10, pady=(0, 10))
        self.translate_button.pack(side="left", padx=(0, 5))
        self.clear_button.pack(side="left", padx=5)
        self.swap_button.pack(side="left", padx=5)
        
        # Sa√≠da
        self.output_label.pack(anchor="w", padx=10, pady=(10, 5))
        self.output_text.pack(fill="x", padx=10, pady=(0, 10))
        
        # Frame de informa√ß√µes
        self.info_frame.pack(fill="x", pady=(0, 10))
        
        self.progress_bar.pack(fill="x", padx=10, pady=5)
        self.status_label.pack(pady=2)
        self.stats_label.pack(pady=2)
    
    def translate_text(self):
        """Traduzir texto em thread separada"""
        if self.is_translating:
            return
        
        text = self.input_text.get("1.0", "end-1c").strip()
        if not text:
            messagebox.showwarning("Aviso", "Digite um texto para traduzir")
            return
        
        # Iniciar tradu√ß√£o em thread separada
        thread = threading.Thread(target=self._translate_worker, args=(text,))
        thread.daemon = True
        thread.start()
    
    def _translate_worker(self, text: str):
        """Worker para tradu√ß√£o em background"""
        self.is_translating = True
        
        try:
            # Atualizar UI
            self.root.after(0, self._update_ui_translating, True)
            
            # Mapear idiomas
            source_lang = self._map_language(self.source_lang_combo.get(), to_code=True)
            target_lang = self._map_language(self.target_lang_combo.get(), to_code=True)
            
            # Traduzir
            result = self.translator.translate(text, source_lang, target_lang)
            
            # Atualizar UI com resultado
            self.root.after(0, self._update_translation_result, result)
            
        except Exception as e:
            self.root.after(0, self._show_error, f"Erro na tradu√ß√£o: {str(e)}")
        
        finally:
            self.is_translating = False
            self.root.after(0, self._update_ui_translating, False)
    
    def _update_ui_translating(self, translating: bool):
        """Atualizar UI durante tradu√ß√£o"""
        if translating:
            self.translate_button.configure(text="‚è≥ Traduzindo...", state="disabled")
            self.status_label.configure(text="üîÑ Traduzindo...")
            self.progress_bar.set(0.5)
        else:
            self.translate_button.configure(text="üîÑ Traduzir", state="normal")
            self.progress_bar.set(0)
    
    def _update_translation_result(self, result: Dict[str, Any]):
        """Atualizar resultado da tradu√ß√£o"""
        # Mostrar tradu√ß√£o
        self.output_text.configure(state="normal")
        self.output_text.delete("1.0", "end")
        self.output_text.insert("1.0", result["translation"])
        self.output_text.configure(state="disabled")
        
        # Atualizar status
        confidence = result.get("confidence", 0) * 100
        time_ms = result.get("processing_time", 0) * 1000
        
        self.status_label.configure(
            text=f"‚úÖ Tradu√ß√£o conclu√≠da | Confian√ßa: {confidence:.1f}% | Tempo: {time_ms:.0f}ms"
        )
        
        # Adicionar ao hist√≥rico
        self.translation_history.append(result)
        
        # Atualizar estat√≠sticas
        self._update_stats()
    
    def _update_stats(self):
        """Atualizar estat√≠sticas na UI"""
        stats = self.translator.get_stats()
        self.stats_label.configure(
            text=f"Tradu√ß√µes: {stats['translations']} | Tempo m√©dio: {stats['avg_time']:.3f}s"
        )
    
    def _show_error(self, message: str):
        """Mostrar erro na UI"""
        self.status_label.configure(text=f"‚ùå {message}")
        messagebox.showerror("Erro", message)
    
    def _map_language(self, lang_display: str, to_code: bool = True) -> str:
        """Mapear entre nomes de idiomas e c√≥digos"""
        mapping = {
            "Auto": "auto",
            "Portugu√™s": "pt",
            "English": "en",
            "R√°pido": "fast",
            "Preciso": "accurate",
            "Balanceado": "balanced"
        }
        
        reverse_mapping = {v: k for k, v in mapping.items()}
        
        if to_code:
            return mapping.get(lang_display, lang_display.lower())
        else:
            return reverse_mapping.get(lang_display, lang_display)
    
    def on_model_change(self, model_name: str):
        """Callback para mudan√ßa de modelo"""
        model_code = self._map_language(model_name, to_code=True)
        self.translator.load_model(model_code)
        self.status_label.configure(text=f"üìä Modelo alterado para: {model_name}")
    
    def clear_text(self):
        """Limpar textos"""
        self.input_text.delete("1.0", "end")
        self.output_text.configure(state="normal")
        self.output_text.delete("1.0", "end")
        self.output_text.configure(state="disabled")
        self.status_label.configure(text="‚úÖ Textos limpos")
    
    def swap_languages(self):
        """Inverter idiomas de origem e destino"""
        source = self.source_lang_combo.get()
        target = self.target_lang_combo.get()
        
        if source != "Auto":
            self.source_lang_combo.set(target)
            self.target_lang_combo.set(source)
            
            # Trocar textos tamb√©m
            input_text = self.input_text.get("1.0", "end-1c")
            output_text = self.output_text.get("1.0", "end-1c")
            
            if output_text:
                self.input_text.delete("1.0", "end")
                self.input_text.insert("1.0", output_text)
                
                self.output_text.configure(state="normal")
                self.output_text.delete("1.0", "end")
                self.output_text.insert("1.0", input_text)
                self.output_text.configure(state="disabled")
            
            self.status_label.configure(text="üîÑ Idiomas invertidos")
    
    def open_file(self):
        """Abrir arquivo de texto"""
        file_path = filedialog.askopenfilename(
            title="Abrir arquivo",
            filetypes=[("Arquivos de texto", "*.txt"), ("Todos os arquivos", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                    self.input_text.delete("1.0", "end")
                    self.input_text.insert("1.0", content)
                    self.status_label.configure(text=f"üìÅ Arquivo carregado: {file_path}")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao abrir arquivo: {str(e)}")
    
    def save_translation(self):
        """Salvar tradu√ß√£o em arquivo"""
        translation = self.output_text.get("1.0", "end-1c")
        if not translation:
            messagebox.showwarning("Aviso", "Nenhuma tradu√ß√£o para salvar")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="Salvar tradu√ß√£o",
            defaultextension=".txt",
            filetypes=[("Arquivos de texto", "*.txt"), ("Todos os arquivos", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(translation)
                    self.status_label.configure(text=f"üíæ Tradu√ß√£o salva: {file_path}")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao salvar arquivo: {str(e)}")
    
    def show_history(self):
        """Mostrar hist√≥rico de tradu√ß√µes"""
        if not self.translation_history:
            messagebox.showinfo("Hist√≥rico", "Nenhuma tradu√ß√£o no hist√≥rico")
            return
        
        # Criar janela de hist√≥rico
        history_window = ctk.CTkToplevel(self.root)
        history_window.title("üìö Hist√≥rico de Tradu√ß√µes")
        history_window.geometry("600x400")
        
        # Lista de hist√≥rico
        history_text = ctk.CTkTextbox(history_window)
        history_text.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Adicionar tradu√ß√µes ao hist√≥rico
        for i, translation in enumerate(self.translation_history[-10:], 1):
            history_text.insert("end", f"{i}. {translation['original']} ‚Üí {translation['translation']}\n\n")
    
    def show_stats(self):
        """Mostrar estat√≠sticas detalhadas"""
        stats = self.translator.get_stats()
        
        stats_text = f"""
üìä Estat√≠sticas do NeuroTranslator

Tradu√ß√µes realizadas: {stats['translations']}
Tempo total: {stats['total_time']:.3f}s
Tempo m√©dio por tradu√ß√£o: {stats['avg_time']:.3f}s
Modelo atual: {self.translator.current_model or 'Nenhum'}

Hist√≥rico: {len(self.translation_history)} tradu√ß√µes salvas
        """
        
        messagebox.showinfo("Estat√≠sticas", stats_text)
    
    def show_settings(self):
        """Mostrar configura√ß√µes"""
        messagebox.showinfo("Configura√ß√µes", "Configura√ß√µes avan√ßadas em desenvolvimento...")
    
    def show_about(self):
        """Mostrar informa√ß√µes sobre o programa"""
        about_text = """
üß† NeuroTranslator PT-EN v1.0

Sistema de Tradu√ß√£o Autom√°tica em Tempo Real
Portugu√™s ‚Üî English

Desenvolvido por: Fl√°vio Henrique Barbosa
Email: flaviohenriquehb777@outlook.com
LinkedIn: https://www.linkedin.com/in/fl√°vio-henrique-barbosa-38465938

Tecnologias utilizadas:
‚Ä¢ Python 3.8+
‚Ä¢ PyTorch & Transformers
‚Ä¢ CustomTkinter
‚Ä¢ Deep Learning Models

¬© 2025 - Licen√ßa MIT
        """
        
        messagebox.showinfo("Sobre", about_text)
    
    def show_docs(self):
        """Mostrar documenta√ß√£o"""
        messagebox.showinfo("Documenta√ß√£o", "Consulte o README.md no reposit√≥rio do projeto")
    
    def run(self):
        """Executar aplica√ß√£o"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.root.quit()